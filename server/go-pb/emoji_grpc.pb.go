// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/emoji.proto

package go_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmojiServiceClient is the client API for EmojiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmojiServiceClient interface {
	Emojize(ctx context.Context, in *EmojizeRequest, opts ...grpc.CallOption) (*EmojizeReply, error)
}

type emojiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmojiServiceClient(cc grpc.ClientConnInterface) EmojiServiceClient {
	return &emojiServiceClient{cc}
}

func (c *emojiServiceClient) Emojize(ctx context.Context, in *EmojizeRequest, opts ...grpc.CallOption) (*EmojizeReply, error) {
	out := new(EmojizeReply)
	err := c.cc.Invoke(ctx, "/EmojiService/Emojize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmojiServiceServer is the server API for EmojiService service.
// All implementations should embed UnimplementedEmojiServiceServer
// for forward compatibility
type EmojiServiceServer interface {
	Emojize(context.Context, *EmojizeRequest) (*EmojizeReply, error)
}

// UnimplementedEmojiServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEmojiServiceServer struct {
}

func (UnimplementedEmojiServiceServer) Emojize(context.Context, *EmojizeRequest) (*EmojizeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Emojize not implemented")
}

// UnsafeEmojiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmojiServiceServer will
// result in compilation errors.
type UnsafeEmojiServiceServer interface {
	mustEmbedUnimplementedEmojiServiceServer()
}

func RegisterEmojiServiceServer(s grpc.ServiceRegistrar, srv EmojiServiceServer) {
	s.RegisterService(&EmojiService_ServiceDesc, srv)
}

func _EmojiService_Emojize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmojizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmojiServiceServer).Emojize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmojiService/Emojize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmojiServiceServer).Emojize(ctx, req.(*EmojizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmojiService_ServiceDesc is the grpc.ServiceDesc for EmojiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmojiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmojiService",
	HandlerType: (*EmojiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Emojize",
			Handler:    _EmojiService_Emojize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/emoji.proto",
}
